"""
Searches for all resolved dossiers that are in and 'invalid' state
because of their journal pdf.

Indeed journal pdfs can have a document date posterior to the dossier end date,
which prohibits resolving a containing dossier. For those documents, we set their
document date to the dossier end date.

As we now use the changed date when checking dossier end date
validity, we normally exclude journal PDFs from the check. This is done
by checking for the IAutoGenerated interface. Dossiers that were closed
before 2018.5 can have journal PDFs that do not provide that interface
and have an invalid changed date. We add the interface to those.

    bin/instance run ./scripts/fix_journal_pdf_document_date.py

Options:
  -n : dry run
  -f : force; also corrects documents that do not have the expected title
       for a dossier journal PDF
"""
from datetime import datetime
from datetime import timedelta
from opengever.base.behaviors.changed import IChanged
from opengever.document.behaviors.metadata import IDocumentMetadata
from opengever.document.interfaces import IAutoGeneratedDocument
from opengever.document.interfaces import IDossierJournalPDFMarker
from opengever.dossier.behaviors.dossier import IDossier
from opengever.maintenance.debughelpers import setup_app
from opengever.maintenance.debughelpers import setup_option_parser
from opengever.maintenance.debughelpers import setup_plone
from plone import api
from zope.interface import alsoProvides
import sys
import transaction


def fix_document_end_date(document):
    """ set document_date to dossier end date if the document_date is
    posterior to the dossier end date. Add the IDossierJournalPDFMarker
    if the changed date is posterior to the dossier end date.
    """
    dossier_end_date = IDossier(document.get_parent_dossier()).end

    to_index = []
    document_date = IDocumentMetadata(document).document_date
    if not document_date or document_date > dossier_end_date:
        IDocumentMetadata(document).document_date = dossier_end_date
        print 'Fixing document_date"'
        IDocumentMetadata(document).document_date = dossier_end_date
        to_index.append('document_date')

    document_changed = IChanged(document).changed
    if document_changed.date() > dossier_end_date:
        if not IAutoGeneratedDocument.providedBy(document):
            print 'Adding IDossierJournalPDFMarker'
            alsoProvides(document, IDossierJournalPDFMarker)
            to_index.append('object_provides')

    if to_index:
        document.reindexObject(idxs=to_index)


def get_problematic_journal_pdfs(force=False):
    """ Search for pdf documents in resolved dossiers with either a "document_date"
    posterior to the dossier "end" date or the "changed" date posterior to the
    dossier end date and not providing the IAutoGeneratedDocument Interface
    """
    dossier_brains = api.content.find(portal_type='opengever.dossier.businesscasedossier',
                                      review_state=['dossier-state-resolved'])
    for dossier_brain in dossier_brains:
        if not dossier_brain.end:
            continue
        dossier = dossier_brain.getObject()

        # Get documents with invalid document_date
        date_range = {'query': dossier_brain.end + timedelta(1),
                      'range': 'min'}
        problematic_brains = api.content.find(context=dossier,
                                              depth=1,
                                              portal_type='opengever.document.document',
                                              file_extension='.pdf',
                                              document_date=date_range)

        # Get documents with invalid changed date
        date_range['query'] = datetime.fromordinal(date_range['query'].toordinal())
        document_brains = api.content.find(context=dossier,
                                           depth=1,
                                           portal_type='opengever.document.document',
                                           file_extension='.pdf',
                                           changed=date_range)

        # Combine the results from the two queries
        problematic_uids = [brain.UID for brain in problematic_brains]
        problematic_brains = list(problematic_brains)
        for brain in document_brains:
            if brain.UID not in problematic_uids:
                problematic_brains.append(brain)

        # Filter out documents that have the IAutoGeneratedDocument interface as
        # these are not taken into consideration in dossier resolve conditions
        problematic_documents = []
        for brain in problematic_brains:
            document = brain.getObject()
            if not IAutoGeneratedDocument.providedBy(document):
                problematic_documents.append(document)

        # If the problematic documents do not have the expected title of a dossier
        # journal, we emit a warning and skip it except if "--force" is used.
        title_fr = "Journal du dossier {}".format(dossier_brain.Title)
        title_de = "Dossier Journal {}".format(dossier_brain.Title)
        title_en = "Journal of dossier {}".format(dossier_brain.Title)
        for document in problematic_documents:

            print('\n\nFixing "{}" at "{}"'.format(brain.Title, brain.getPath()))
            if not (brain.Title.startswith(title_fr) or
                    brain.Title.startswith(title_de) or
                    brain.Title.startswith(title_en)):
                print("This document does not have the standard title of a journal PDF.")
                if not force:
                    print("skipping")
                    continue
            yield document
    return


def main():
    parser = setup_option_parser()
    parser.add_option("-n", "--dry-run", action="store_true",
                      dest="dryrun", default=False)
    parser.add_option("-f", "--force", action="store_true",
                      dest="force", default=False)
    (options, args) = parser.parse_args()

    if not len(args) == 0:
        print "Not expecting any argument"
        sys.exit(1)

    if options.dryrun:
        print "dry-run ..."
        transaction.doom()

    app = setup_app()
    setup_plone(app)

    for document in get_problematic_journal_pdfs(force=options.force):
        fix_document_end_date(document)

    if not options.dryrun:
        print "committing ..."
        transaction.commit()

    print "done."


if __name__ == '__main__':
    main()
